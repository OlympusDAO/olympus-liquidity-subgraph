// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class lpPair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save lpPair entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save lpPair entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("lpPair", id.toString(), this);
  }

  static load(id: string): lpPair | null {
    return store.get("lpPair", id) as lpPair | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get token0Decimal(): BigInt {
    let value = this.get("token0Decimal");
    return value.toBigInt();
  }

  set token0Decimal(value: BigInt) {
    this.set("token0Decimal", Value.fromBigInt(value));
  }

  get token1Decimal(): BigInt {
    let value = this.get("token1Decimal");
    return value.toBigInt();
  }

  set token1Decimal(value: BigInt) {
    this.set("token1Decimal", Value.fromBigInt(value));
  }

  get fee(): BigDecimal {
    let value = this.get("fee");
    return value.toBigDecimal();
  }

  set fee(value: BigDecimal) {
    this.set("fee", Value.fromBigDecimal(value));
  }

  get version(): string {
    let value = this.get("version");
    return value.toString();
  }

  set version(value: string) {
    this.set("version", Value.fromString(value));
  }

  get liquidity(): BigDecimal | null {
    let value = this.get("liquidity");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidity(value: BigDecimal | null) {
    if (value === null) {
      this.unset("liquidity");
    } else {
      this.set("liquidity", Value.fromBigDecimal(value as BigDecimal));
    }
  }
}

export class dailyVolume extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save dailyVolume entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save dailyVolume entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("dailyVolume", id.toString(), this);
  }

  static load(id: string): dailyVolume | null {
    return store.get("dailyVolume", id) as dailyVolume | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }

  get lp(): string {
    let value = this.get("lp");
    return value.toString();
  }

  set lp(value: string) {
    this.set("lp", Value.fromString(value));
  }

  get volume(): BigDecimal {
    let value = this.get("volume");
    return value.toBigDecimal();
  }

  set volume(value: BigDecimal) {
    this.set("volume", Value.fromBigDecimal(value));
  }

  get swaps(): BigInt {
    let value = this.get("swaps");
    return value.toBigInt();
  }

  set swaps(value: BigInt) {
    this.set("swaps", Value.fromBigInt(value));
  }

  get protocolOwnedLiquidity(): BigDecimal {
    let value = this.get("protocolOwnedLiquidity");
    return value.toBigDecimal();
  }

  set protocolOwnedLiquidity(value: BigDecimal) {
    this.set("protocolOwnedLiquidity", Value.fromBigDecimal(value));
  }

  get feesEarned(): BigDecimal {
    let value = this.get("feesEarned");
    return value.toBigDecimal();
  }

  set feesEarned(value: BigDecimal) {
    this.set("feesEarned", Value.fromBigDecimal(value));
  }

  get feesTotal(): BigDecimal {
    let value = this.get("feesTotal");
    return value.toBigDecimal();
  }

  set feesTotal(value: BigDecimal) {
    this.set("feesTotal", Value.fromBigDecimal(value));
  }
}
